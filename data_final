# -*- coding: utf-8 -*-
"""
Created on Wed Nov 25 01:22:40 2015

@author: Mohit Sharma
"""

"""
This is the final code to audit, clean and update the dataset of Dublin city map.
"""
import xml.etree.cElementTree as ET
from collections import defaultdict
import re
import pprint
import codecs
import json

OSMFILE = "dublin_ireland.osm"
street_type_re = re.compile(r'\b\S+\.?$', re.IGNORECASE)
lower = re.compile(r'^([a-z]|_)*$')
lower_colon = re.compile(r'^([a-z]|_)*:([a-z]|_)*$')
problemchars = re.compile(r'[=\+/&<>;\'"\?%#$@\,\. \t\r\n]')
CREATED = [ "version", "changeset", "timestamp", "user", "uid"]

# expected array to check correct street names and postcodes
expected = ["Street", "Avenue", "Boulevard", "Drive", "Court", "Place", "Square", "Lane", "Road", 
            "Trail", "Parkway", "Commons", "Castletown", "Heights", "Lane", "D01", "D02",
            "D03", "D04", "D05", "D08", "D12", "D13", "D22", "D01 F5P2", "D01 X2P2"]


# UPDATE THIS VARIABLE FOR STREET NAMES and POSTCODES
mapping = { "St": "Street",
            "Sreet": "Street",
            "street": "Street",
            "St.": "Street",
            "Ave": "Avenue",
            "Avevnue": "Avenue",
            "castletown":"Castletown",
            "heights":"Heights",
            "lane":"Lane",
            "Rd." : "Road",
            "road": "Road",
            "Roafd": "Road",
            "1": "D01",
            "2": "D02",
            "3": "D03",
            "4": "D04",
            "5": "D05",
            "8": "D08",
            "12": "D12",
            "13": "D13",
            "22": "D22",
            "D01F5P2": "D01 F5P2",
            "D01X2P2": "D01 X2P2"}


def audit_street_type(street_types, street_name):
    m = street_type_re.search(street_name)
    if m:
        street_type = m.group()
        if street_type not in expected:
            street_types[street_type].add(street_name)


def is_street_name(elem):
    return (elem.attrib['k'] == "addr:street")


def audit(osmfile):
    osm_file = open(osmfile, "r")
    street_types = defaultdict(set)
    for event, elem in ET.iterparse(osm_file, events=("start",)):

        if elem.tag == "node" or elem.tag == "way":
            for tag in elem.iter("tag"):
                if is_street_name(tag):
                    audit_street_type(street_types, tag.attrib['v'])
    
    return street_types


def update_name(name, mapping):

    # YOUR CODE HERE
    m = street_type_re.search(name)
    if m:
        street_type = m.group()
        if street_type in mapping.keys():
            if street_type not in expected:
                name = re.sub(street_type_re, mapping[street_type], name)
#                print name
            else:
                pass
    return name   



def shape_element(element):
    node = {}
    if element.tag == "node" or element.tag == "way" :
        # YOUR CODE HERE
        node['id'] = element.get('id')
        node['type'] =  element.tag
        node['pos'] = []
        node['node_refs'] = []
        new_address = {}
        node['created'] = {}

        if element.get('visible'):
            node['visible'] = element.get('visible')

        for x in CREATED:
            if x in element.attrib:
                node['created'][x]=element.attrib[x]
#code to check and update the attrib values for each tag
        has_double_colon = re.compile(r'^([a-z]|_)*:([a-z]|_)*:([a-z]|_)*$')
        for tag in element.iter('tag'):
            if re.search(problemchars, tag.attrib['k']):
                break
            elif re.search(has_double_colon, tag.attrib['k']):
                break
            elif re.search(lower_colon, tag.attrib['k']):
                low = str(tag.attrib['k']).split(':')
                new_address[low[1]] = update_name(tag.attrib['v'],mapping)
            else:
                node[tag.attrib['k']] = tag.attrib['v'] 


        node['address']= new_address
        
        for nd in element.iter('nd'):
            try:
                node['node_refs'].append(nd.attrib['ref'])
            except:
                return node


        if element.tag == 'node':
            node['pos'].append(float(element.attrib['lat']))
            node['pos'].append(float(element.attrib['lon']))

        try:
            if node['address']=={} :
                del node['address']
        except:
            return node
        try:
            if node['node_refs'] == []:
                del node['node_refs']
        except:
            return node
        try:
            if node['pos']==[] :
                del node['pos']
        except:
            return node
        return node
    else:
        return None
        

def process_map(file_in, pretty = False):
    # You do not need to change this file
    file_out = "{0}.json".format(file_in)
    data = []
    with codecs.open(file_out, "w") as fo:
        for _, element in ET.iterparse(file_in):
            el = shape_element(element)
            if el:
                data.append(el)
                if pretty:
                    fo.write(json.dumps(el, indent=2)+"\n")
                else:
                    fo.write(json.dumps(el) + "\n")
                element.clear()
    return data

def test():

    data = process_map(OSMFILE, False)
    pprint.pprint(data)
    
""" 
    st_types = audit(OSMFILE)
    assert len(st_types) == 3
    pprint.pprint(st_types)
    
    for st_type, ways in st_types.iteritems():
        for name in ways:
            better_name = update_name(name, mapping)
            print name, "=>", better_name
    return st_types

"""    

    

if __name__ == '__main__':
    test()
